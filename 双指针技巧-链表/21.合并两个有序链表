/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode  *p1,*p2,*head,*p;
        p1 = list1;
        p2 = list2;
          if (list1 == nullptr) return list2;
          if (list2 == nullptr) return list1;
         if(p1->val > p2->val)
            {
                head=p2;
                p2 = p2->next;
            }
            else
            {
                head=p1;
                p1 = p1->next;
            }
            p =head;
        while(p1!=nullptr && p2!=nullptr)
        {
            if(p1->val>p2->val)
            {
                head->next=p2;
                p2 = p2->next;
            }
            else
            {
                head->next=p1;
                p1 = p1->next;

            }
           head =head->next;
        }

         if(p2!=nullptr)
            {
                head ->next= p2;
            }
             if(p1!=nullptr)
            {
                head ->next= p1;
            }                         //因为链表本来就有序，当一条链表被接完后，直接接另一条非空链表的剩下部分就行
                          
    return p;
    }
    
};
